/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.internal.thrift;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2025-09-30")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class InternalService {

  public interface Iface {

    public java.util.List<InternalLeadDto> findLeads(double lowAnnualRevenue, double highAnnualRevenue, java.lang.String state) throws ThriftWrongOrderForRevenue, ThriftWrongState, org.apache.thrift.TException;

    public java.util.List<InternalLeadDto> findLeadsByDate(java.lang.String startDate, java.lang.String endDate) throws ThriftWrongOrderForDate, org.apache.thrift.TException;

    public void addLead(InternalLeadDto lead) throws org.apache.thrift.TException;

    public void deleteLead(InternalLeadDto lead) throws ThriftNoSuchLead, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findLeads(double lowAnnualRevenue, double highAnnualRevenue, java.lang.String state, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler) throws org.apache.thrift.TException;

    public void findLeadsByDate(java.lang.String startDate, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler) throws org.apache.thrift.TException;

    public void addLead(InternalLeadDto lead, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteLead(InternalLeadDto lead, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public java.util.List<InternalLeadDto> findLeads(double lowAnnualRevenue, double highAnnualRevenue, java.lang.String state) throws ThriftWrongOrderForRevenue, ThriftWrongState, org.apache.thrift.TException
    {
      send_findLeads(lowAnnualRevenue, highAnnualRevenue, state);
      return recv_findLeads();
    }

    public void send_findLeads(double lowAnnualRevenue, double highAnnualRevenue, java.lang.String state) throws org.apache.thrift.TException
    {
      findLeads_args args = new findLeads_args();
      args.setLowAnnualRevenue(lowAnnualRevenue);
      args.setHighAnnualRevenue(highAnnualRevenue);
      args.setState(state);
      sendBase("findLeads", args);
    }

    public java.util.List<InternalLeadDto> recv_findLeads() throws ThriftWrongOrderForRevenue, ThriftWrongState, org.apache.thrift.TException
    {
      findLeads_result result = new findLeads_result();
      receiveBase(result, "findLeads");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLeads failed: unknown result");
    }

    @Override
    public java.util.List<InternalLeadDto> findLeadsByDate(java.lang.String startDate, java.lang.String endDate) throws ThriftWrongOrderForDate, org.apache.thrift.TException
    {
      send_findLeadsByDate(startDate, endDate);
      return recv_findLeadsByDate();
    }

    public void send_findLeadsByDate(java.lang.String startDate, java.lang.String endDate) throws org.apache.thrift.TException
    {
      findLeadsByDate_args args = new findLeadsByDate_args();
      args.setStartDate(startDate);
      args.setEndDate(endDate);
      sendBase("findLeadsByDate", args);
    }

    public java.util.List<InternalLeadDto> recv_findLeadsByDate() throws ThriftWrongOrderForDate, org.apache.thrift.TException
    {
      findLeadsByDate_result result = new findLeadsByDate_result();
      receiveBase(result, "findLeadsByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findLeadsByDate failed: unknown result");
    }

    @Override
    public void addLead(InternalLeadDto lead) throws org.apache.thrift.TException
    {
      send_addLead(lead);
      recv_addLead();
    }

    public void send_addLead(InternalLeadDto lead) throws org.apache.thrift.TException
    {
      addLead_args args = new addLead_args();
      args.setLead(lead);
      sendBase("addLead", args);
    }

    public void recv_addLead() throws org.apache.thrift.TException
    {
      addLead_result result = new addLead_result();
      receiveBase(result, "addLead");
      return;
    }

    @Override
    public void deleteLead(InternalLeadDto lead) throws ThriftNoSuchLead, org.apache.thrift.TException
    {
      send_deleteLead(lead);
      recv_deleteLead();
    }

    public void send_deleteLead(InternalLeadDto lead) throws org.apache.thrift.TException
    {
      deleteLead_args args = new deleteLead_args();
      args.setLead(lead);
      sendBase("deleteLead", args);
    }

    public void recv_deleteLead() throws ThriftNoSuchLead, org.apache.thrift.TException
    {
      deleteLead_result result = new deleteLead_result();
      receiveBase(result, "deleteLead");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void findLeads(double lowAnnualRevenue, double highAnnualRevenue, java.lang.String state, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLeads_call method_call = new findLeads_call(lowAnnualRevenue, highAnnualRevenue, state, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLeads_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<InternalLeadDto>> {
      private double lowAnnualRevenue;
      private double highAnnualRevenue;
      private java.lang.String state;
      public findLeads_call(double lowAnnualRevenue, double highAnnualRevenue, java.lang.String state, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lowAnnualRevenue = lowAnnualRevenue;
        this.highAnnualRevenue = highAnnualRevenue;
        this.state = state;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLeads", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLeads_args args = new findLeads_args();
        args.setLowAnnualRevenue(lowAnnualRevenue);
        args.setHighAnnualRevenue(highAnnualRevenue);
        args.setState(state);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<InternalLeadDto> getResult() throws ThriftWrongOrderForRevenue, ThriftWrongState, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLeads();
      }
    }

    @Override
    public void findLeadsByDate(java.lang.String startDate, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findLeadsByDate_call method_call = new findLeadsByDate_call(startDate, endDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findLeadsByDate_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<InternalLeadDto>> {
      private java.lang.String startDate;
      private java.lang.String endDate;
      public findLeadsByDate_call(java.lang.String startDate, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startDate = startDate;
        this.endDate = endDate;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findLeadsByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findLeadsByDate_args args = new findLeadsByDate_args();
        args.setStartDate(startDate);
        args.setEndDate(endDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.List<InternalLeadDto> getResult() throws ThriftWrongOrderForDate, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findLeadsByDate();
      }
    }

    @Override
    public void addLead(InternalLeadDto lead, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addLead_call method_call = new addLead_call(lead, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addLead_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private InternalLeadDto lead;
      public addLead_call(InternalLeadDto lead, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lead = lead;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addLead", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addLead_args args = new addLead_args();
        args.setLead(lead);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addLead();
        return null;
      }
    }

    @Override
    public void deleteLead(InternalLeadDto lead, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteLead_call method_call = new deleteLead_call(lead, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteLead_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private InternalLeadDto lead;
      public deleteLead_call(InternalLeadDto lead, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.lead = lead;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteLead", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteLead_args args = new deleteLead_args();
        args.setLead(lead);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws ThriftNoSuchLead, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteLead();
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findLeads", new findLeads());
      processMap.put("findLeadsByDate", new findLeadsByDate());
      processMap.put("addLead", new addLead());
      processMap.put("deleteLead", new deleteLead());
      return processMap;
    }

    public static class findLeads<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLeads_args> {
      public findLeads() {
        super("findLeads");
      }

      @Override
      public findLeads_args getEmptyArgsInstance() {
        return new findLeads_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public findLeads_result getResult(I iface, findLeads_args args) throws org.apache.thrift.TException {
        findLeads_result result = new findLeads_result();
        try {
          result.success = iface.findLeads(args.lowAnnualRevenue, args.highAnnualRevenue, args.state);
        } catch (ThriftWrongOrderForRevenue e) {
          result.e = e;
        } catch (ThriftWrongState ee) {
          result.ee = ee;
        }
        return result;
      }
    }

    public static class findLeadsByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findLeadsByDate_args> {
      public findLeadsByDate() {
        super("findLeadsByDate");
      }

      @Override
      public findLeadsByDate_args getEmptyArgsInstance() {
        return new findLeadsByDate_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public findLeadsByDate_result getResult(I iface, findLeadsByDate_args args) throws org.apache.thrift.TException {
        findLeadsByDate_result result = new findLeadsByDate_result();
        try {
          result.success = iface.findLeadsByDate(args.startDate, args.endDate);
        } catch (ThriftWrongOrderForDate e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class addLead<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addLead_args> {
      public addLead() {
        super("addLead");
      }

      @Override
      public addLead_args getEmptyArgsInstance() {
        return new addLead_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public addLead_result getResult(I iface, addLead_args args) throws org.apache.thrift.TException {
        addLead_result result = new addLead_result();
        iface.addLead(args.lead);
        return result;
      }
    }

    public static class deleteLead<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteLead_args> {
      public deleteLead() {
        super("deleteLead");
      }

      @Override
      public deleteLead_args getEmptyArgsInstance() {
        return new deleteLead_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public deleteLead_result getResult(I iface, deleteLead_args args) throws org.apache.thrift.TException {
        deleteLead_result result = new deleteLead_result();
        try {
          iface.deleteLead(args.lead);
        } catch (ThriftNoSuchLead e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findLeads", new findLeads());
      processMap.put("findLeadsByDate", new findLeadsByDate());
      processMap.put("addLead", new addLead());
      processMap.put("deleteLead", new deleteLead());
      return processMap;
    }

    public static class findLeads<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLeads_args, java.util.List<InternalLeadDto>> {
      public findLeads() {
        super("findLeads");
      }

      @Override
      public findLeads_args getEmptyArgsInstance() {
        return new findLeads_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>>() { 
          @Override
          public void onComplete(java.util.List<InternalLeadDto> o) {
            findLeads_result result = new findLeads_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findLeads_result result = new findLeads_result();
            if (e instanceof ThriftWrongOrderForRevenue) {
              result.e = (ThriftWrongOrderForRevenue) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof ThriftWrongState) {
              result.ee = (ThriftWrongState) e;
              result.setEeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, findLeads_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler) throws org.apache.thrift.TException {
        iface.findLeads(args.lowAnnualRevenue, args.highAnnualRevenue, args.state,resultHandler);
      }
    }

    public static class findLeadsByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findLeadsByDate_args, java.util.List<InternalLeadDto>> {
      public findLeadsByDate() {
        super("findLeadsByDate");
      }

      @Override
      public findLeadsByDate_args getEmptyArgsInstance() {
        return new findLeadsByDate_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>>() { 
          @Override
          public void onComplete(java.util.List<InternalLeadDto> o) {
            findLeadsByDate_result result = new findLeadsByDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findLeadsByDate_result result = new findLeadsByDate_result();
            if (e instanceof ThriftWrongOrderForDate) {
              result.e = (ThriftWrongOrderForDate) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, findLeadsByDate_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<InternalLeadDto>> resultHandler) throws org.apache.thrift.TException {
        iface.findLeadsByDate(args.startDate, args.endDate,resultHandler);
      }
    }

    public static class addLead<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addLead_args, Void> {
      public addLead() {
        super("addLead");
      }

      @Override
      public addLead_args getEmptyArgsInstance() {
        return new addLead_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            addLead_result result = new addLead_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addLead_result result = new addLead_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, addLead_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.addLead(args.lead,resultHandler);
      }
    }

    public static class deleteLead<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteLead_args, Void> {
      public deleteLead() {
        super("deleteLead");
      }

      @Override
      public deleteLead_args getEmptyArgsInstance() {
        return new deleteLead_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            deleteLead_result result = new deleteLead_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteLead_result result = new deleteLead_result();
            if (e instanceof ThriftNoSuchLead) {
              result.e = (ThriftNoSuchLead) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, deleteLead_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteLead(args.lead,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findLeads_args implements org.apache.thrift.TBase<findLeads_args, findLeads_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLeads_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLeads_args");

    private static final org.apache.thrift.protocol.TField LOW_ANNUAL_REVENUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lowAnnualRevenue", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField HIGH_ANNUAL_REVENUE_FIELD_DESC = new org.apache.thrift.protocol.TField("highAnnualRevenue", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findLeads_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findLeads_argsTupleSchemeFactory();

    private double lowAnnualRevenue; // required
    private double highAnnualRevenue; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String state; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOW_ANNUAL_REVENUE((short)1, "lowAnnualRevenue"),
      HIGH_ANNUAL_REVENUE((short)2, "highAnnualRevenue"),
      STATE((short)3, "state");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOW_ANNUAL_REVENUE
            return LOW_ANNUAL_REVENUE;
          case 2: // HIGH_ANNUAL_REVENUE
            return HIGH_ANNUAL_REVENUE;
          case 3: // STATE
            return STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LOWANNUALREVENUE_ISSET_ID = 0;
    private static final int __HIGHANNUALREVENUE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOW_ANNUAL_REVENUE, new org.apache.thrift.meta_data.FieldMetaData("lowAnnualRevenue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.HIGH_ANNUAL_REVENUE, new org.apache.thrift.meta_data.FieldMetaData("highAnnualRevenue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLeads_args.class, metaDataMap);
    }

    public findLeads_args() {
    }

    public findLeads_args(
      double lowAnnualRevenue,
      double highAnnualRevenue,
      java.lang.String state)
    {
      this();
      this.lowAnnualRevenue = lowAnnualRevenue;
      setLowAnnualRevenueIsSet(true);
      this.highAnnualRevenue = highAnnualRevenue;
      setHighAnnualRevenueIsSet(true);
      this.state = state;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLeads_args(findLeads_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.lowAnnualRevenue = other.lowAnnualRevenue;
      this.highAnnualRevenue = other.highAnnualRevenue;
      if (other.isSetState()) {
        this.state = other.state;
      }
    }

    @Override
    public findLeads_args deepCopy() {
      return new findLeads_args(this);
    }

    @Override
    public void clear() {
      setLowAnnualRevenueIsSet(false);
      this.lowAnnualRevenue = 0.0;
      setHighAnnualRevenueIsSet(false);
      this.highAnnualRevenue = 0.0;
      this.state = null;
    }

    public double getLowAnnualRevenue() {
      return this.lowAnnualRevenue;
    }

    public findLeads_args setLowAnnualRevenue(double lowAnnualRevenue) {
      this.lowAnnualRevenue = lowAnnualRevenue;
      setLowAnnualRevenueIsSet(true);
      return this;
    }

    public void unsetLowAnnualRevenue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOWANNUALREVENUE_ISSET_ID);
    }

    /** Returns true if field lowAnnualRevenue is set (has been assigned a value) and false otherwise */
    public boolean isSetLowAnnualRevenue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOWANNUALREVENUE_ISSET_ID);
    }

    public void setLowAnnualRevenueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOWANNUALREVENUE_ISSET_ID, value);
    }

    public double getHighAnnualRevenue() {
      return this.highAnnualRevenue;
    }

    public findLeads_args setHighAnnualRevenue(double highAnnualRevenue) {
      this.highAnnualRevenue = highAnnualRevenue;
      setHighAnnualRevenueIsSet(true);
      return this;
    }

    public void unsetHighAnnualRevenue() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HIGHANNUALREVENUE_ISSET_ID);
    }

    /** Returns true if field highAnnualRevenue is set (has been assigned a value) and false otherwise */
    public boolean isSetHighAnnualRevenue() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HIGHANNUALREVENUE_ISSET_ID);
    }

    public void setHighAnnualRevenueIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HIGHANNUALREVENUE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getState() {
      return this.state;
    }

    public findLeads_args setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LOW_ANNUAL_REVENUE:
        if (value == null) {
          unsetLowAnnualRevenue();
        } else {
          setLowAnnualRevenue((java.lang.Double)value);
        }
        break;

      case HIGH_ANNUAL_REVENUE:
        if (value == null) {
          unsetHighAnnualRevenue();
        } else {
          setHighAnnualRevenue((java.lang.Double)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOW_ANNUAL_REVENUE:
        return getLowAnnualRevenue();

      case HIGH_ANNUAL_REVENUE:
        return getHighAnnualRevenue();

      case STATE:
        return getState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOW_ANNUAL_REVENUE:
        return isSetLowAnnualRevenue();
      case HIGH_ANNUAL_REVENUE:
        return isSetHighAnnualRevenue();
      case STATE:
        return isSetState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findLeads_args)
        return this.equals((findLeads_args)that);
      return false;
    }

    public boolean equals(findLeads_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lowAnnualRevenue = true;
      boolean that_present_lowAnnualRevenue = true;
      if (this_present_lowAnnualRevenue || that_present_lowAnnualRevenue) {
        if (!(this_present_lowAnnualRevenue && that_present_lowAnnualRevenue))
          return false;
        if (this.lowAnnualRevenue != that.lowAnnualRevenue)
          return false;
      }

      boolean this_present_highAnnualRevenue = true;
      boolean that_present_highAnnualRevenue = true;
      if (this_present_highAnnualRevenue || that_present_highAnnualRevenue) {
        if (!(this_present_highAnnualRevenue && that_present_highAnnualRevenue))
          return false;
        if (this.highAnnualRevenue != that.highAnnualRevenue)
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lowAnnualRevenue);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(highAnnualRevenue);

      hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState())
        hashCode = hashCode * 8191 + state.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findLeads_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetLowAnnualRevenue(), other.isSetLowAnnualRevenue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLowAnnualRevenue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowAnnualRevenue, other.lowAnnualRevenue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHighAnnualRevenue(), other.isSetHighAnnualRevenue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHighAnnualRevenue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highAnnualRevenue, other.highAnnualRevenue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findLeads_args(");
      boolean first = true;

      sb.append("lowAnnualRevenue:");
      sb.append(this.lowAnnualRevenue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("highAnnualRevenue:");
      sb.append(this.highAnnualRevenue);
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLeads_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeads_argsStandardScheme getScheme() {
        return new findLeads_argsStandardScheme();
      }
    }

    private static class findLeads_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findLeads_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findLeads_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOW_ANNUAL_REVENUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.lowAnnualRevenue = iprot.readDouble();
                struct.setLowAnnualRevenueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIGH_ANNUAL_REVENUE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.highAnnualRevenue = iprot.readDouble();
                struct.setHighAnnualRevenueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.state = iprot.readString();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findLeads_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(LOW_ANNUAL_REVENUE_FIELD_DESC);
        oprot.writeDouble(struct.lowAnnualRevenue);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HIGH_ANNUAL_REVENUE_FIELD_DESC);
        oprot.writeDouble(struct.highAnnualRevenue);
        oprot.writeFieldEnd();
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeString(struct.state);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLeads_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeads_argsTupleScheme getScheme() {
        return new findLeads_argsTupleScheme();
      }
    }

    private static class findLeads_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findLeads_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLeads_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLowAnnualRevenue()) {
          optionals.set(0);
        }
        if (struct.isSetHighAnnualRevenue()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLowAnnualRevenue()) {
          oprot.writeDouble(struct.lowAnnualRevenue);
        }
        if (struct.isSetHighAnnualRevenue()) {
          oprot.writeDouble(struct.highAnnualRevenue);
        }
        if (struct.isSetState()) {
          oprot.writeString(struct.state);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLeads_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.lowAnnualRevenue = iprot.readDouble();
          struct.setLowAnnualRevenueIsSet(true);
        }
        if (incoming.get(1)) {
          struct.highAnnualRevenue = iprot.readDouble();
          struct.setHighAnnualRevenueIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = iprot.readString();
          struct.setStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findLeads_result implements org.apache.thrift.TBase<findLeads_result, findLeads_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLeads_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLeads_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findLeads_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findLeads_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable java.util.List<InternalLeadDto> success; // required
    private @org.apache.thrift.annotation.Nullable ThriftWrongOrderForRevenue e; // required
    private @org.apache.thrift.annotation.Nullable ThriftWrongState ee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      EE((short)2, "ee");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // EE
            return EE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalLeadDto.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftWrongOrderForRevenue.class)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftWrongState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLeads_result.class, metaDataMap);
    }

    public findLeads_result() {
    }

    public findLeads_result(
      java.util.List<InternalLeadDto> success,
      ThriftWrongOrderForRevenue e,
      ThriftWrongState ee)
    {
      this();
      this.success = success;
      this.e = e;
      this.ee = ee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLeads_result(findLeads_result other) {
      if (other.isSetSuccess()) {
        java.util.List<InternalLeadDto> __this__success = new java.util.ArrayList<InternalLeadDto>(other.success.size());
        for (InternalLeadDto other_element : other.success) {
          __this__success.add(new InternalLeadDto(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ThriftWrongOrderForRevenue(other.e);
      }
      if (other.isSetEe()) {
        this.ee = new ThriftWrongState(other.ee);
      }
    }

    @Override
    public findLeads_result deepCopy() {
      return new findLeads_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
      this.ee = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<InternalLeadDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(InternalLeadDto elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<InternalLeadDto>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<InternalLeadDto> getSuccess() {
      return this.success;
    }

    public findLeads_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<InternalLeadDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftWrongOrderForRevenue getE() {
      return this.e;
    }

    public findLeads_result setE(@org.apache.thrift.annotation.Nullable ThriftWrongOrderForRevenue e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftWrongState getEe() {
      return this.ee;
    }

    public findLeads_result setEe(@org.apache.thrift.annotation.Nullable ThriftWrongState ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<InternalLeadDto>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftWrongOrderForRevenue)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((ThriftWrongState)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      case EE:
        return getEe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case EE:
        return isSetEe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findLeads_result)
        return this.equals((findLeads_result)that);
      return false;
    }

    public boolean equals(findLeads_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      hashCode = hashCode * 8191 + ((isSetEe()) ? 131071 : 524287);
      if (isSetEe())
        hashCode = hashCode * 8191 + ee.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findLeads_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEe(), other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findLeads_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLeads_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeads_resultStandardScheme getScheme() {
        return new findLeads_resultStandardScheme();
      }
    }

    private static class findLeads_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findLeads_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findLeads_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<InternalLeadDto>(_list0.size);
                  @org.apache.thrift.annotation.Nullable InternalLeadDto _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new InternalLeadDto();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftWrongOrderForRevenue();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new ThriftWrongState();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findLeads_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (InternalLeadDto _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLeads_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeads_resultTupleScheme getScheme() {
        return new findLeads_resultTupleScheme();
      }
    }

    private static class findLeads_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findLeads_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLeads_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetEe()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (InternalLeadDto _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLeads_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<InternalLeadDto>(_list5.size);
            @org.apache.thrift.annotation.Nullable InternalLeadDto _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new InternalLeadDto();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftWrongOrderForRevenue();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ee = new ThriftWrongState();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findLeadsByDate_args implements org.apache.thrift.TBase<findLeadsByDate_args, findLeadsByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<findLeadsByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLeadsByDate_args");

    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findLeadsByDate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findLeadsByDate_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable java.lang.String startDate; // required
    private @org.apache.thrift.annotation.Nullable java.lang.String endDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_DATE((short)1, "startDate"),
      END_DATE((short)2, "endDate");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_DATE
            return START_DATE;
          case 2: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLeadsByDate_args.class, metaDataMap);
    }

    public findLeadsByDate_args() {
    }

    public findLeadsByDate_args(
      java.lang.String startDate,
      java.lang.String endDate)
    {
      this();
      this.startDate = startDate;
      this.endDate = endDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLeadsByDate_args(findLeadsByDate_args other) {
      if (other.isSetStartDate()) {
        this.startDate = other.startDate;
      }
      if (other.isSetEndDate()) {
        this.endDate = other.endDate;
      }
    }

    @Override
    public findLeadsByDate_args deepCopy() {
      return new findLeadsByDate_args(this);
    }

    @Override
    public void clear() {
      this.startDate = null;
      this.endDate = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getStartDate() {
      return this.startDate;
    }

    public findLeadsByDate_args setStartDate(@org.apache.thrift.annotation.Nullable java.lang.String startDate) {
      this.startDate = startDate;
      return this;
    }

    public void unsetStartDate() {
      this.startDate = null;
    }

    /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
    public boolean isSetStartDate() {
      return this.startDate != null;
    }

    public void setStartDateIsSet(boolean value) {
      if (!value) {
        this.startDate = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEndDate() {
      return this.endDate;
    }

    public findLeadsByDate_args setEndDate(@org.apache.thrift.annotation.Nullable java.lang.String endDate) {
      this.endDate = endDate;
      return this;
    }

    public void unsetEndDate() {
      this.endDate = null;
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return this.endDate != null;
    }

    public void setEndDateIsSet(boolean value) {
      if (!value) {
        this.endDate = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case START_DATE:
        if (value == null) {
          unsetStartDate();
        } else {
          setStartDate((java.lang.String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case START_DATE:
        return getStartDate();

      case END_DATE:
        return getEndDate();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case START_DATE:
        return isSetStartDate();
      case END_DATE:
        return isSetEndDate();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findLeadsByDate_args)
        return this.equals((findLeadsByDate_args)that);
      return false;
    }

    public boolean equals(findLeadsByDate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_startDate = true && this.isSetStartDate();
      boolean that_present_startDate = true && that.isSetStartDate();
      if (this_present_startDate || that_present_startDate) {
        if (!(this_present_startDate && that_present_startDate))
          return false;
        if (!this.startDate.equals(that.startDate))
          return false;
      }

      boolean this_present_endDate = true && this.isSetEndDate();
      boolean that_present_endDate = true && that.isSetEndDate();
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (!this.endDate.equals(that.endDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStartDate()) ? 131071 : 524287);
      if (isSetStartDate())
        hashCode = hashCode * 8191 + startDate.hashCode();

      hashCode = hashCode * 8191 + ((isSetEndDate()) ? 131071 : 524287);
      if (isSetEndDate())
        hashCode = hashCode * 8191 + endDate.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findLeadsByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetStartDate(), other.isSetStartDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEndDate(), other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findLeadsByDate_args(");
      boolean first = true;

      sb.append("startDate:");
      if (this.startDate == null) {
        sb.append("null");
      } else {
        sb.append(this.startDate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLeadsByDate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeadsByDate_argsStandardScheme getScheme() {
        return new findLeadsByDate_argsStandardScheme();
      }
    }

    private static class findLeadsByDate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findLeadsByDate_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findLeadsByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.startDate = iprot.readString();
                struct.setStartDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endDate = iprot.readString();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findLeadsByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startDate != null) {
          oprot.writeFieldBegin(START_DATE_FIELD_DESC);
          oprot.writeString(struct.startDate);
          oprot.writeFieldEnd();
        }
        if (struct.endDate != null) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLeadsByDate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeadsByDate_argsTupleScheme getScheme() {
        return new findLeadsByDate_argsTupleScheme();
      }
    }

    private static class findLeadsByDate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findLeadsByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLeadsByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStartDate()) {
          optionals.set(0);
        }
        if (struct.isSetEndDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStartDate()) {
          oprot.writeString(struct.startDate);
        }
        if (struct.isSetEndDate()) {
          oprot.writeString(struct.endDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLeadsByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.startDate = iprot.readString();
          struct.setStartDateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endDate = iprot.readString();
          struct.setEndDateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findLeadsByDate_result implements org.apache.thrift.TBase<findLeadsByDate_result, findLeadsByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<findLeadsByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findLeadsByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findLeadsByDate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findLeadsByDate_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable java.util.List<InternalLeadDto> success; // required
    private @org.apache.thrift.annotation.Nullable ThriftWrongOrderForDate e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalLeadDto.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftWrongOrderForDate.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findLeadsByDate_result.class, metaDataMap);
    }

    public findLeadsByDate_result() {
    }

    public findLeadsByDate_result(
      java.util.List<InternalLeadDto> success,
      ThriftWrongOrderForDate e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findLeadsByDate_result(findLeadsByDate_result other) {
      if (other.isSetSuccess()) {
        java.util.List<InternalLeadDto> __this__success = new java.util.ArrayList<InternalLeadDto>(other.success.size());
        for (InternalLeadDto other_element : other.success) {
          __this__success.add(new InternalLeadDto(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ThriftWrongOrderForDate(other.e);
      }
    }

    @Override
    public findLeadsByDate_result deepCopy() {
      return new findLeadsByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<InternalLeadDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(InternalLeadDto elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<InternalLeadDto>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<InternalLeadDto> getSuccess() {
      return this.success;
    }

    public findLeadsByDate_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<InternalLeadDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftWrongOrderForDate getE() {
      return this.e;
    }

    public findLeadsByDate_result setE(@org.apache.thrift.annotation.Nullable ThriftWrongOrderForDate e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<InternalLeadDto>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftWrongOrderForDate)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findLeadsByDate_result)
        return this.equals((findLeadsByDate_result)that);
      return false;
    }

    public boolean equals(findLeadsByDate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findLeadsByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findLeadsByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findLeadsByDate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeadsByDate_resultStandardScheme getScheme() {
        return new findLeadsByDate_resultStandardScheme();
      }
    }

    private static class findLeadsByDate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findLeadsByDate_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findLeadsByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<InternalLeadDto>(_list8.size);
                  @org.apache.thrift.annotation.Nullable InternalLeadDto _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new InternalLeadDto();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftWrongOrderForDate();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findLeadsByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (InternalLeadDto _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findLeadsByDate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findLeadsByDate_resultTupleScheme getScheme() {
        return new findLeadsByDate_resultTupleScheme();
      }
    }

    private static class findLeadsByDate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findLeadsByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findLeadsByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (InternalLeadDto _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findLeadsByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<InternalLeadDto>(_list13.size);
            @org.apache.thrift.annotation.Nullable InternalLeadDto _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new InternalLeadDto();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftWrongOrderForDate();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class addLead_args implements org.apache.thrift.TBase<addLead_args, addLead_args._Fields>, java.io.Serializable, Cloneable, Comparable<addLead_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLead_args");

    private static final org.apache.thrift.protocol.TField LEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("lead", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addLead_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addLead_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable InternalLeadDto lead; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LEAD((short)1, "lead");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LEAD
            return LEAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LEAD, new org.apache.thrift.meta_data.FieldMetaData("lead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalLeadDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLead_args.class, metaDataMap);
    }

    public addLead_args() {
    }

    public addLead_args(
      InternalLeadDto lead)
    {
      this();
      this.lead = lead;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLead_args(addLead_args other) {
      if (other.isSetLead()) {
        this.lead = new InternalLeadDto(other.lead);
      }
    }

    @Override
    public addLead_args deepCopy() {
      return new addLead_args(this);
    }

    @Override
    public void clear() {
      this.lead = null;
    }

    @org.apache.thrift.annotation.Nullable
    public InternalLeadDto getLead() {
      return this.lead;
    }

    public addLead_args setLead(@org.apache.thrift.annotation.Nullable InternalLeadDto lead) {
      this.lead = lead;
      return this;
    }

    public void unsetLead() {
      this.lead = null;
    }

    /** Returns true if field lead is set (has been assigned a value) and false otherwise */
    public boolean isSetLead() {
      return this.lead != null;
    }

    public void setLeadIsSet(boolean value) {
      if (!value) {
        this.lead = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LEAD:
        if (value == null) {
          unsetLead();
        } else {
          setLead((InternalLeadDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LEAD:
        return getLead();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LEAD:
        return isSetLead();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addLead_args)
        return this.equals((addLead_args)that);
      return false;
    }

    public boolean equals(addLead_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lead = true && this.isSetLead();
      boolean that_present_lead = true && that.isSetLead();
      if (this_present_lead || that_present_lead) {
        if (!(this_present_lead && that_present_lead))
          return false;
        if (!this.lead.equals(that.lead))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLead()) ? 131071 : 524287);
      if (isSetLead())
        hashCode = hashCode * 8191 + lead.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addLead_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetLead(), other.isSetLead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lead, other.lead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addLead_args(");
      boolean first = true;

      sb.append("lead:");
      if (this.lead == null) {
        sb.append("null");
      } else {
        sb.append(this.lead);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lead != null) {
        lead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLead_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addLead_argsStandardScheme getScheme() {
        return new addLead_argsStandardScheme();
      }
    }

    private static class addLead_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addLead_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, addLead_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lead = new InternalLeadDto();
                struct.lead.read(iprot);
                struct.setLeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, addLead_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lead != null) {
          oprot.writeFieldBegin(LEAD_FIELD_DESC);
          struct.lead.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLead_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addLead_argsTupleScheme getScheme() {
        return new addLead_argsTupleScheme();
      }
    }

    private static class addLead_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addLead_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLead_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLead()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLead()) {
          struct.lead.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLead_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lead = new InternalLeadDto();
          struct.lead.read(iprot);
          struct.setLeadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class addLead_result implements org.apache.thrift.TBase<addLead_result, addLead_result._Fields>, java.io.Serializable, Cloneable, Comparable<addLead_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addLead_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addLead_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addLead_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addLead_result.class, metaDataMap);
    }

    public addLead_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addLead_result(addLead_result other) {
    }

    @Override
    public addLead_result deepCopy() {
      return new addLead_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addLead_result)
        return this.equals((addLead_result)that);
      return false;
    }

    public boolean equals(addLead_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(addLead_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addLead_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addLead_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addLead_resultStandardScheme getScheme() {
        return new addLead_resultStandardScheme();
      }
    }

    private static class addLead_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addLead_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, addLead_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, addLead_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addLead_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public addLead_resultTupleScheme getScheme() {
        return new addLead_resultTupleScheme();
      }
    }

    private static class addLead_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addLead_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addLead_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addLead_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteLead_args implements org.apache.thrift.TBase<deleteLead_args, deleteLead_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLead_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLead_args");

    private static final org.apache.thrift.protocol.TField LEAD_FIELD_DESC = new org.apache.thrift.protocol.TField("lead", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteLead_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteLead_argsTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable InternalLeadDto lead; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LEAD((short)1, "lead");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LEAD
            return LEAD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LEAD, new org.apache.thrift.meta_data.FieldMetaData("lead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InternalLeadDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLead_args.class, metaDataMap);
    }

    public deleteLead_args() {
    }

    public deleteLead_args(
      InternalLeadDto lead)
    {
      this();
      this.lead = lead;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLead_args(deleteLead_args other) {
      if (other.isSetLead()) {
        this.lead = new InternalLeadDto(other.lead);
      }
    }

    @Override
    public deleteLead_args deepCopy() {
      return new deleteLead_args(this);
    }

    @Override
    public void clear() {
      this.lead = null;
    }

    @org.apache.thrift.annotation.Nullable
    public InternalLeadDto getLead() {
      return this.lead;
    }

    public deleteLead_args setLead(@org.apache.thrift.annotation.Nullable InternalLeadDto lead) {
      this.lead = lead;
      return this;
    }

    public void unsetLead() {
      this.lead = null;
    }

    /** Returns true if field lead is set (has been assigned a value) and false otherwise */
    public boolean isSetLead() {
      return this.lead != null;
    }

    public void setLeadIsSet(boolean value) {
      if (!value) {
        this.lead = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LEAD:
        if (value == null) {
          unsetLead();
        } else {
          setLead((InternalLeadDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LEAD:
        return getLead();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LEAD:
        return isSetLead();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteLead_args)
        return this.equals((deleteLead_args)that);
      return false;
    }

    public boolean equals(deleteLead_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lead = true && this.isSetLead();
      boolean that_present_lead = true && that.isSetLead();
      if (this_present_lead || that_present_lead) {
        if (!(this_present_lead && that_present_lead))
          return false;
        if (!this.lead.equals(that.lead))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLead()) ? 131071 : 524287);
      if (isSetLead())
        hashCode = hashCode * 8191 + lead.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteLead_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetLead(), other.isSetLead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lead, other.lead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteLead_args(");
      boolean first = true;

      sb.append("lead:");
      if (this.lead == null) {
        sb.append("null");
      } else {
        sb.append(this.lead);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (lead != null) {
        lead.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLead_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteLead_argsStandardScheme getScheme() {
        return new deleteLead_argsStandardScheme();
      }
    }

    private static class deleteLead_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteLead_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLead_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LEAD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.lead = new InternalLeadDto();
                struct.lead.read(iprot);
                struct.setLeadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLead_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.lead != null) {
          oprot.writeFieldBegin(LEAD_FIELD_DESC);
          struct.lead.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLead_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteLead_argsTupleScheme getScheme() {
        return new deleteLead_argsTupleScheme();
      }
    }

    private static class deleteLead_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteLead_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLead_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLead()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLead()) {
          struct.lead.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLead_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.lead = new InternalLeadDto();
          struct.lead.read(iprot);
          struct.setLeadIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class deleteLead_result implements org.apache.thrift.TBase<deleteLead_result, deleteLead_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteLead_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteLead_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteLead_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteLead_resultTupleSchemeFactory();

    private @org.apache.thrift.annotation.Nullable ThriftNoSuchLead e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftNoSuchLead.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteLead_result.class, metaDataMap);
    }

    public deleteLead_result() {
    }

    public deleteLead_result(
      ThriftNoSuchLead e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteLead_result(deleteLead_result other) {
      if (other.isSetE()) {
        this.e = new ThriftNoSuchLead(other.e);
      }
    }

    @Override
    public deleteLead_result deepCopy() {
      return new deleteLead_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftNoSuchLead getE() {
      return this.e;
    }

    public deleteLead_result setE(@org.apache.thrift.annotation.Nullable ThriftNoSuchLead e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftNoSuchLead)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteLead_result)
        return this.equals((deleteLead_result)that);
      return false;
    }

    public boolean equals(deleteLead_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteLead_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteLead_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteLead_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteLead_resultStandardScheme getScheme() {
        return new deleteLead_resultStandardScheme();
      }
    }

    private static class deleteLead_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteLead_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteLead_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftNoSuchLead();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteLead_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteLead_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public deleteLead_resultTupleScheme getScheme() {
        return new deleteLead_resultTupleScheme();
      }
    }

    private static class deleteLead_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteLead_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteLead_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteLead_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new ThriftNoSuchLead();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
